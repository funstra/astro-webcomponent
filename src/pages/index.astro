---
import Layout from "../layouts/Layout.astro";

const content = [
  "hr",
  "br",
  "Designing Engineering",
  "br",
  "&&",
  "Information Designing",
  "br",
  "Algorithmic UI",
  "&&",
  "br",
  "Markup",
  "≕ l♥ve",
];
---

<Layout title="Home" pageOrder={0}>
  <svg width="100%" height="100%" viewBox="0 0 256 256">
    <g transform="translate(128 128)">
      <circle fill="none" stroke-width="8" stroke="currentColor" r="64"
      ></circle>
    </g>
  </svg>
  <h2>
    {
      content.map((row, i) => {
        if (row === "br") {
          return <br />;
        }
        return (
          <div class="overflow" style={`--i:${i}`}>
            {() => {
              switch (row) {
                case "&&":
                  return <strong>&&</strong>;
                case "hr":
                  return <hr />;
                default:
                  return <span>{row}</span>;
              }
            }}
          </div>
        );
      })
    }
  </h2>
</Layout>
<!-- {row !== "&&" ? <span>{row}</span> : <strong>{row}</strong>} -->
<style>
  @keyframes enter {
    from {
      transform: translate(var(--x, 0%), var(--y, 0%));
    }
    to {
      transform: translate(0, 0);
    }
  }
  h2 {
    line-height: 1.3;
    text-align: center;
    grid-row: -3;
    justify-self: center;
    grid-column-start: 1;
    grid-column-end: 13;
  }
  :global(html[data-new-visit="true"]) :is(span, strong) {
  }
  span,
  strong,
  hr {
    /* margin-inline-end: 1ch; */
    animation-name: enter;
    display: inline-block;
    animation-duration: 400ms;
    animation-fill-mode: both;
    animation-delay: calc(200ms + 90ms * var(--i) + var(--offset, 0ms));
    animation-timing-function: cubic-bezier(0.23, 1, 0.32, 1.5);
    /* animation-timing-function: cubic-bezier(1, 0.22, 0, 1.42); */
  }
  span,
  strong {
    --y: 100%;
  }
  hr {
    --x: -100%;
    /* --offset: 750ms; */
  }
  .overflow {
    margin-inline-end: 1ch;
    /* padding-top: 4px; */
    display: inline-block;
    /* white-space: pre-line; */
    line-height: 1;
    overflow: hidden;
    outline: 1px currentColor dashed;
    padding: 2px;
  }
  hr {
    display: block;
    width: var(--space-3xl);
    /* margin-inline: auto; */
    /* border-color: hsl(var(--col-prim)); */
    border-style: none;
    height: var(--space-s);
    background-color: hsl(var(--col-prim));
    /* border-width: var(--space-2xs); */
    /* margin-block: var(--space-3xs); */
  }

  svg {
    grid-row: 1 / 5;
    overflow: visible;
  }

  @media (min-width: 640px) {
    h2 {
      width: auto;
      justify-self: start;
      text-align: left;
      grid-row: 2;
      grid-column-start: 2;
    }
    :global(hr) {
      margin-inline: 0;
    }
    svg {
      grid-column: -7 / -1;
      grid-row: 3/-1;
    }
  }
</style>
