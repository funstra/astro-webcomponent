---
import Icons from "./Icons.astro";

export interface link {
  name: string;
  url: string;
}
export interface Props {
  links: link[];
}

const { links } = Astro.props as Props;
---

<m-nav>
  <ul>
    {
      links.map(link => (
        <li
          data-path={link.url}
          data-current={Astro.url.pathname === link.url ? "true" : null}
        >
          <a href={link.url}>
            <Icons width={20} height={20} type={link.name.toLowerCase()} />
          </a>
        </li>
      ))
    }
  </ul>
</m-nav>

<style>
  :global(html.is-fetching) m-nav {
    background-color: yellow;
    --h: 0.5;
  }
  :global(html.is-animating-out) m-nav {
    --h: 0.25;
  }
  m-nav {
    isolation: isolate;
    transition-property: background-color, opacity;
    transition-duration: 750ms;
    transition-delay: 5000ms;

    position: relative;
    display: grid;
    width: max-content;
    height: max-content;

    --o: 0.85;
    background-color: hsl(var(--col-wht) / var(--o));
    opacity: 0.75;

    border-radius: var(--space-3xs);
    padding: var(--space-3xs);
    align-items: center;

    box-shadow: 0 0 var(--space-s) hsl(var(--col-blk) / 0.1);
  }
  m-nav:hover {
    transition-delay: 100ms;
    transition-duration: 250ms;
    opacity: 1;
  }
  ul {
    display: flex;
    gap: var(--space-2xs);
    align-items: center;
  }
  li {
    padding: var(--space-3xs);
    position: relative;
    transition-property: color;
    transition-duration: 200ms;
    transition-delay: 150ms;
    font-weight: 1000;
  }
  li::after {
    z-index: -1;
    transition-property: transform;
    transition-duration: 200ms;
    content: "";
    position: absolute;
    left: 0;
    bottom: 0;
    width: 100%;
    height: 100%;
    transform-origin: bottom;
    transform: scaleY(0);
    background-color: hsl(var(--col-blk));
    border-radius: var(--space-3xs);
  }
  :global(html.is-fetching) li::after {
    transition-duration: 2500ms;
  }
  li[data-current="true"] {
    color: hsl(var(--col-prim));
  }
  li[data-current="true"]::after {
    transform: scaleY(var(--h, 1));
  }
</style>

<script>
  customElements.define(
    "m-nav",
    class customElement extends HTMLElement {
      links: NodeListOf<HTMLLIElement>;
      state: {
        currentLink: string | null;
      };
      currentLinkEl: HTMLLIElement;

      static get observedAttributes() {
        return [];
      }
      constructor() {
        super();

        // state
        this.state = {
          currentLink: location.pathname,
        };
        this.links = this.querySelectorAll("ul li");
        this.currentLinkEl = this.querySelector("ul li[data-current]");
        // listners
        document.addEventListener("navigating-done", () => {
          this.state.currentLink = location.pathname;
          this.updateLinks();
        });
      }

      updateLinks() {
        this.links.forEach(link => {
          if (link.dataset.path === this.state.currentLink) {
            link.dataset.current = "true";
            this.currentLinkEl = link;
          } else {
            delete link.dataset.current;
          }
        });
      }

      connectedCallback() {}
      diconnectedCallback() {}
      attributeChangedCallback(name, oldValue, newValue) {}
    }
  );
</script>
