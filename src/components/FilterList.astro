---
import Card from "./Card.astro";

interface Props {
  list: any[];
}

const { list } = Astro.props as Props;
---

<filter-list>
  <input type="text" />
  <ul>
    {
      list.map(({ title, url }, i) => {
        return (
          <li data-key={title} data-index={i} style={`--i:${i}`}>
            <Card title={title} link={url}>
              Lorem ipsum dolor sit amet consectetur adipisicing elit. Natus
              aliquam tempora fugiat quam odio? Alias, recusandae?
            </Card>
          </li>
        );
      })
    }
  </ul>
</filter-list>

<style>
  filter-list {
    display: block;
    /* width: max-content; */
    padding: var(--space-3xs);
    border: 1px black solid;
    display: flex;
    flex-direction: column;
    gap: var(--space-3xs);
  }
  ul {
    flex-grow: 1;
    border: 1px black dashed;
    overflow-y: scroll;
    padding: var(--space-3xs);
  }
  li {
    transition-property: transform;
    transition-delay: calc(25ms + var(--i) * 25ms);
    transition-duration: calc(50ms + var(--i) * 25ms);
    transition-timing-function: ease-in-out;
    padding: var(--space-3xs);
    border-radius: 2px;
  }
  li:hover {
    background-color: hsl(var(--col-blk) / 0.1);
  }
  li[data-show="false"] {
    display: none;
  }
</style>

<script>
  customElements.define(
    "filter-list",
    class customElement extends HTMLElement {
      static get observedAttributes() {
        return [];
      }
      constructor() {
        super();
        this.input = this.querySelector("input");
        this.items = this.querySelectorAll("li");
        this.input.addEventListener("input", e => {
          this.filterItems();
        });
      }
      filterItems() {
        const before = [...this.items].map(
          item => item.getBoundingClientRect().y
        );
        this.items.forEach(item => {
          if (
            item.dataset.key
              .toLowerCase()
              .includes(this.input.value.toLowerCase())
          ) {
            item.dataset.show = "true";
          } else {
            item.dataset.show = "false";
          }
        });
        const after = [...this.items].map(
          item => item.getBoundingClientRect().y
        );

        before.forEach((b, i) => {
          const a = after[i];
          const d = b - a;
          const item = this.items[i];
          item.style.transitionProperty = "none";
          item.style.transform =
            item.dataset.show === "true"
              ? `translateY(${Math.max(d, 0)}px)`
              : "";
        });
        requestAnimationFrame(() => {
          this.items.forEach(item => {
            item.style.transitionProperty = "";
            item.style.transform = "";
          });
        });
      }
      connectedCallback() {
        console.log("hellooo");
      }
      diconnectedCallback() {}
      attributeChangedCallback(name, oldValue, newValue) {}
    }
  );
  // import "./FilterList";
</script>
